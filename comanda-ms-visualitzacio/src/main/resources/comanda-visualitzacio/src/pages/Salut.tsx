import * as React from 'react';
import { useTranslation } from 'react-i18next';
import Box from '@mui/material/Box';
import Grid from '@mui/material/Grid2';
import Button from '@mui/material/Button';
import Chip from '@mui/material/Chip';
import Typography from '@mui/material/Typography';
import CircularProgress from '@mui/material/CircularProgress';
import { Gauge, gaugeClasses } from '@mui/x-charts/Gauge';
import { useTheme } from '@mui/material/styles';
import {
    BasePage,
    useResourceApiService,
    useBaseAppContext,
    dateFormatLocale,
    MuiDataGridColDef,
} from 'reactlib';
import SalutToolbar from '../components/SalutToolbar';
import UpdownBarChart from '../components/UpdownBarChart';
import { DataGridPro, isAutogeneratedRow } from '@mui/x-data-grid-pro';

const useAppData = () => {
    const {
        isReady: appEntornApiIsReady,
        find: appEntornApiFind,
        artifactAction: appEntornApiAction,
    } = useResourceApiService('entornApp');
    const { isReady: salutApiIsReady, artifactReport: salutApiReport } =
        useResourceApiService('salut');
    const [loading, setLoading] = React.useState<boolean>();
    const [appEntorns, setAppEntorns] = React.useState<any[]>();
    const [estats, setEstats] = React.useState<Record<string, any>>({});
    const [salutLastItems, setSalutLastItems] = React.useState<any[]>();
    const [reportParams, setReportParams] = React.useState<any>();
    const refresh = (
        dataInici: string,
        dataFi: string,
        agrupacio: string,
        actionExec?: boolean
    ) => {
        const reportParams = {
            dataInici,
            dataFi,
            agrupacio,
        };
        setReportParams(reportParams);
        if (appEntornApiIsReady && salutApiIsReady) {
            setLoading(true);
            new Promise((resolve, reject) => {
                if (actionExec) {
                    appEntornApiAction(null, { code: 'refresh' }).then(resolve).catch(reject);
                } else {
                    resolve(null);
                }
            })
                .then(() => {
                    return appEntornApiFind({ unpaged: true, filter: "activa : true AND app.activa : true" });
                })
                .then((response) => {
                    setAppEntorns(response.rows);
                    return salutApiReport(null, { code: 'salut_last' });
                })
                .then((apiResponse) => {
                    const salutLastItems = apiResponse as any[];
                    setSalutLastItems(salutLastItems);
                    const ps: Promise<any>[] = salutLastItems?.map((i) => {
                        const reportData = {
                            ...reportParams,
                            entornAppId: i.entornAppId,
                        };
                        return new Promise((resolve, reject) => {
                            salutApiReport(null, { code: 'estat', data: reportData })
                                .then((ii) => {
                                    setEstats((e) => ({ ...e, [i.entornAppId]: ii }));
                                    resolve(null);
                                })
                                .catch(reject);
                        });
                    });
                    return Promise.all(ps);
                })
                .finally(() => setLoading(false));
        }
    };
    return {
        ready: appEntornApiIsReady && salutApiIsReady,
        loading,
        refresh,
        appEntorns,
        salutLastItems,
        estats,
        reportParams,
    };
};

const UpdownGaugeChart: React.FC<any> = (props: { salutLastItems: any[] }) => {
    const { salutLastItems } = props;
    const theme = useTheme();
    const upCount = salutLastItems?.filter((i) => i.appUp).length;
    const upPercent = salutLastItems?.length ? (upCount / salutLastItems.length) * 100 : 0;
    return (
        <Gauge
            value={upPercent}
            innerRadius='75%'
            sx={() => ({
                [`& .${gaugeClasses.valueText}`]: {
                    fontSize: 24,
                    transform: 'translate(0px, 0px)',
                },
                [`& .${gaugeClasses.valueArc}`]: {
                    fill: theme.palette.success.main,
                },
                [`& .${gaugeClasses.referenceArc}`]: {
                    fill: theme.palette.error.main,
                },
            })}
            text={({ value }) =>
                `${((value ?? 0) * salutLastItems.length) / 100} / ${salutLastItems.length}`
            }
        />
    );
};

const ItemStateChip: React.FC<any> = (props: { up: boolean; date: string }) => {
    const { up, date } = props;
    return (
        <>
            {up ? (
                <Chip label="UP" size="small" color="success" />
            ) : (
                <Chip label="DOWN" size="small" color="error" />
            )}
            <br />
            <Typography variant="caption">{date}</Typography>
        </>
    );
};

const AppDataTable: React.FC<any> = (props: { appEntorns: any[]; salutLastItems: any[] }) => {
    const { appEntorns, salutLastItems } = props;
    const { t } = useTranslation();
    const { getLinkComponent } = useBaseAppContext();

    const findUpdownItem = React.useCallback(
        (id: any) => {
            return salutLastItems?.find((entry) => entry.entornAppId === id);
        },
        [salutLastItems]
    );

    const renderItemStateChip = React.useCallback(
        (id: any, upField: string) => {
            const updownItem = findUpdownItem(id);
            if (updownItem == null) {
                return undefined;
            }
            return (
                <ItemStateChip
                    up={updownItem[upField]}
                    date={dateFormatLocale(updownItem.data, true)}
                />
            );
        },
        [findUpdownItem]
    );

    const columns: MuiDataGridColDef[] = React.useMemo(() => {
        return [
            {
                flex: 0.5,
                field: 'estat',
                headerName: t('page.salut.apps.column.estat'),
                minWidth: 100,
                renderCell: ({ id }) => renderItemStateChip(id, 'appUp'),
            },
            {
                flex: 0.5,
                field: 'versio',
                headerName: t('page.salut.apps.column.versio'),
                minWidth: 100,
            },
            {
                flex: 0.5,
                field: 'bd',
                headerName: t('page.salut.apps.column.bd'),
                minWidth: 100,
                maxWidth: 130,
                renderCell: ({ id }) => renderItemStateChip(id, 'bdUp'),
            },
            {
                flex: 0.5,
                field: 'latencia',
                headerName: t('page.salut.apps.column.latencia'),
                minWidth: 100,
                valueGetter: (_value, row) => {
                    const updownItem = findUpdownItem(row.id);
                    return updownItem?.appLatencia != null
                        ? updownItem.appLatencia + ' ms'
                        : t('page.salut.nd');
                },
            },
            {
                flex: 0.5,
                field: 'integ',
                headerName: t('page.salut.apps.column.integ'),
                minWidth: 100,
                renderCell: ({ id }) => {
                    const updownItem = findUpdownItem(id);

                    if (!updownItem) {
                        return null;
                    }

                    return (
                        <>
                            <Chip
                                label={updownItem.integracioUpCount}
                                size="small"
                                color="success"
                            />
                            &nbsp;/&nbsp;
                            <Chip
                                label={updownItem.integracioDownCount}
                                size="small"
                                color="error"
                            />
                        </>
                    );
                },
            },
            {
                flex: 0.5,
                field: 'subsis',
                headerName: t('page.salut.apps.column.subsis'),
                minWidth: 100,
                renderCell: ({ id }) => {
                    const updownItem = findUpdownItem(id);

                    if (!updownItem) {
                        return null;
                    }
                    return (
                        <>
                            <Chip
                                label={updownItem.subsistemaUpCount}
                                size="small"
                                color="success"
                            />
                            &nbsp;/&nbsp;
                            <Chip
                                label={updownItem.subsistemaDownCount}
                                size="small"
                                color="error"
                            />
                        </>
                    );
                },
            },
            {
                flex: 0.5,
                field: 'msgs',
                headerName: t('page.salut.apps.column.msgs'),
                minWidth: 150,
                renderCell: ({ id }) => {
                    const updownItem = findUpdownItem(id);

                    if (!updownItem) {
                        return null;
                    }
                    return (
                        <>
                            <Chip
                                label={updownItem.missatgeErrorCount}
                                size="small"
                                color="error"
                            />
                            &nbsp;/&nbsp;
                            <Chip
                                label={updownItem.missatgeWarnCount}
                                size="small"
                                color="warning"
                            />
                            &nbsp;/&nbsp;
                            <Chip label={updownItem.missatgeInfoCount} size="small" color="info" />
                        </>
                    );
                },
            },
            {
                field: 'detalls',
                headerName: '',
                minWidth: 100,
                renderCell: ({ id }) => (
                    <Button
                        variant="contained"
                        size="small"
                        component={getLinkComponent()}
                        to={'appinfo/' + id}
                    >
                        {t('page.salut.apps.detalls')}
                    </Button>
                ),
            },
        ];
    }, [findUpdownItem, getLinkComponent, renderItemStateChip, t]);

    return (
        <DataGridPro
            columns={columns}
            rows={appEntorns}
            treeData
            getTreeDataPath={(row) => [row.app.description, row.entorn.description]}
            groupingColDef={{
                flex: 1,
                minWidth: 300,
                colSpan: (_value, row) => {
                    if (isAutogeneratedRow(row)) return columns.length + 1;
                },
            }}
            defaultGroupingExpansionDepth={-1}
        />
    );
};

const Salut: React.FC = () => {
    const { t } = useTranslation();
    const {
        ready,
        loading,
        refresh: appDataRefresh,
        appEntorns,
        salutLastItems,
        estats,
        reportParams,
    } = useAppData();
    const { setMarginsDisabled } = useBaseAppContext();
    React.useEffect(() => {
        setMarginsDisabled(true);
        return () => setMarginsDisabled(false);
    }, []);
    const dataLoaded = ready && loading != null && !loading;
    const toolbar = (
        <SalutToolbar title={t('page.salut.title')} ready={ready} onRefresh={appDataRefresh} />
    );
    return (
        <BasePage toolbar={toolbar}>
            {loading ? (
                <Box
                    sx={{
                        display: 'flex',
                        flexDirection: 'column',
                        justifyContent: 'center',
                        alignItems: 'center',
                        minHeight: 'calc(100vh - 80px)',
                    }}
                >
                    <CircularProgress size={100} />
                </Box>
            ) : (
                <Grid container spacing={2}>
                    <Grid size={3}>
                        {/* TODO Sense un height, el UpdownGaugeChart podia creixer infinitament cap avall. */}
                        <Box
                            sx={{
                                mt: 2,
                                height: 160,
                                display: 'flex',
                                alignItems: 'center',
                                justifyContent: 'center',
                            }}
                        >
                            {dataLoaded && <UpdownGaugeChart salutLastItems={salutLastItems} />}
                        </Box>
                    </Grid>
                    <Grid size={9} style={{ height: '200px' }}>
                        {dataLoaded && (
                            <UpdownBarChart
                                dataInici={reportParams?.dataInici}
                                agrupacio={reportParams?.agrupacio}
                                estats={estats}
                            />
                        )}
                    </Grid>
                    <Grid size={12}>
                        {dataLoaded && (
                            <AppDataTable appEntorns={appEntorns} salutLastItems={salutLastItems} />
                        )}
                    </Grid>
                </Grid>
            )}
        </BasePage>
    );
};

export default Salut;
