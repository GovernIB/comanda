import * as React from 'react';
import { useTranslation } from 'react-i18next';
import Grid from '@mui/material/Grid';
import {
    GridPage,
    MuiGrid,
    FormField,
    useCloseDialogButtons,
    useMuiContentDialog,
    useBaseAppContext,
    useFormContext,
} from 'reactlib';
import DataGridNoRowsOverlay from '../../lib/components/mui/datagrid/DataGridNoRowsOverlay';
import { GridGroupingColDefOverride, GridSlots, GridTreeDataGroupingCell, isAutogeneratedRow } from '@mui/x-data-grid-pro';
import { Icon, IconButton } from '@mui/material';
import { ContentDetail } from '../components/ContentDetail';

type OnRowExpansionChangeFunction = (id: string | number, expanded: boolean) => void;

interface DefaultRowExpansionState {
    [id: string | number]: boolean;
}

const mapParamTipusToInputType = (tipus: String): string => {
    switch (tipus) {
        case "NUMERIC":
            return 'number';
        case "BOOLEAN":
            return 'checkbox';
        default:
            return 'text';
    }
};

const ParametreForm: React.FC = () => {    
    const { data } = useFormContext();
    const valor = data?.tipus === "BOOLEAN"
        ? data?.valor?.toString().toLowerCase() === 'true'
        : data?.valor;
    //TODO para el campo valor se necessitara logica de back para complementar todas las opciones
    return (
        <Grid container spacing={2}>
            <Grid size={4}><FormField name="codi" readOnly disabled /></Grid>
            <Grid size={8}><FormField name="nom" /></Grid>
            <Grid size={12}><FormField name="descripcio" /></Grid>
            <Grid size={4}><FormField name="tipus" readOnly disabled/></Grid>
            <Grid size={8}><FormField name="valor" type={mapParamTipusToInputType(data?.tipus)} value={valor} /></Grid>
        </Grid>
    );
}

const columns = [
  { field: 'nom', flex: 1 },
  { field: 'descripcio', flex: 3 },
  { field: 'valor', flex: 1 },
  { field: 'tipus', flex: 1 },
  { field: 'editable', flex: 0.5 },
];

const ParametresDetails: React.FC<any> = (props) => {
    const { data } = props;
    const { t } = useTranslation();
    const elementsDetail = [{
        label: t('page.parametres.detail.grup'),
        value: data?.grup
    }, {
        label: t('page.parametres.detail.subGrup'),
        value: data?.subGrup
    }, {
        label: t('page.parametres.detail.tipus'),
        value: data?.tipus
    }, {
        label: t("page.parametres.detail.codi"),
        value: data?.codi
    }, {
        label: t("page.parametres.detail.nom"),
        value: data?.nom
    }, {
        label: t("page.parametres.detail.descripcio"),
        value: data?.descripcio
    }, {
        label: t("page.parametres.detail.valor"),
        value: data?.valor
    },
]
    return <ContentDetail title={""} elements={elementsDetail} />;
}

const ExpandCollapseButtons: React.FC<{
  onExpandAll: () => void;
  onCollapseAll: () => void;
}> = ({ onExpandAll, onCollapseAll }) => (
  <>
    <IconButton onClick={onExpandAll}>
      <Icon>unfold_more</Icon>
    </IconButton>
    <IconButton onClick={onCollapseAll}>
      <Icon>unfold_less</Icon>
    </IconButton>
  </>
);

const ParametresGrid: React.FC<{
  onRowExpansionChange: OnRowExpansionChangeFunction;
  defaultRowExpansion: DefaultRowExpansionState;
}> = ({ onRowExpansionChange, defaultRowExpansion }) => {
    const { t } = useTranslation();
    const { t: tLib } = useBaseAppContext();
    const [expand, setExpand] = React.useState<boolean>(true);
    const closeDialogButton = useCloseDialogButtons();
    const [detailDialogShow, detailDialogComponent] = useMuiContentDialog(closeDialogButton);
    const showDetail = (_id: any, row: any, _event: React.MouseEvent) => {
        detailDialogShow(
            t('page.parametres.detail.title'),
            <ParametresDetails data={row} />,
            closeDialogButton,
            { maxWidth: 'lg', fullWidth: true, }
        );
    }

  const groupingColDef: GridGroupingColDefOverride = React.useMemo(
    () => ({
      flex: 2,
      minWidth: 135,
      renderHeader: (params: any) => (
        <Grid
          container
          display="flex"
          flexDirection="row"
          alignItems="center"
          justifyContent="space-between"
          width="100%"
        >
          <Grid size={6}>{params?.colDef?.headerName}</Grid>
          <Grid size={6}>
            <ExpandCollapseButtons
              onExpandAll={() => {
                setExpand(true);
                onRowExpansionChange?.("__reset__", true);
              }}
              onCollapseAll={() => {
                setExpand(false);
                onRowExpansionChange?.("__reset__", false);
              }}
            />
          </Grid>
        </Grid>
      ),
      renderCell: (params: any) => <GridTreeDataGroupingCell {...params} />,
      colSpan: (_value: any, row: any) => {
        if (isAutogeneratedRow(row)) return columns.length + 1;
      },
    }),
    [onRowExpansionChange]
  );

  return (
    <>
    <MuiGrid
        title={t('page.parametres.title')}
        resourceName="parametre"
        columns={columns}
        toolbarType="upper"
        paginationActive
        toolbarHideCreate
        rowHideDeleteButton
        rowHideUpdateButton
        popupEditActive
        popupEditFormContent={<ParametreForm />}
        rowAdditionalActions={
            [
                {
                    title: tLib('datacommon.update.title'),
                    icon: 'edit',
                    clickShowUpdateDialog: true,
                    hidden: (row) => !row?.id || !row?.editable,
                },
                {
                    title: tLib('datacommon.details.title'),
                    icon: 'info',
                    showInMenu: true,//TODO Al actualizar la libreria se quitara del menu para no tener que hacer dos clicks. El motivo es un error de boton de accion inline.
                    onClick: showDetail,
                    hidden: (row) => !row?.id || row?.editable,
                },
            ]}
        treeData
        getTreeDataPath={(row) => [row.grup, row.subGrup, row.codi]}
        groupingColDef={groupingColDef}
        isGroupExpandedByDefault={(node) => {
            if (defaultRowExpansion[node.id] != null) {
                return defaultRowExpansion[node.id];
            }
            return expand;
        }}
        hideFooter
        slots={{noRowsOverlay: DataGridNoRowsOverlay as GridSlots['noRowsOverlay'],}}
    />
    {detailDialogComponent}
    </>
  );
};

const Parametres: React.FC = () => {
    const [expansionState, setExpansionState] = React.useState<DefaultRowExpansionState>({});
    const onRowExpansionChange: OnRowExpansionChangeFunction = (id, expanded) => {
    if (id === "__reset__") {
        setExpansionState({});
        return;
    }
    setExpansionState((prev) => ({
        ...prev,
        [id]: expanded,
    }));
    };

    return (
    <GridPage disableMargins>
        <ParametresGrid
        onRowExpansionChange={onRowExpansionChange}
        defaultRowExpansion={expansionState}
        />
    </GridPage>
    );
};

export default Parametres;
