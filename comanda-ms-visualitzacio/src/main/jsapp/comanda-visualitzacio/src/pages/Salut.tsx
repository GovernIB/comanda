import * as React from 'react';
import { useTranslation } from 'react-i18next';
import Box from '@mui/material/Box';
import Grid from '@mui/material/Grid';
import Button from '@mui/material/Button';
import Chip from '@mui/material/Chip';
import Typography from '@mui/material/Typography';
import CircularProgress from '@mui/material/CircularProgress';
import { useTheme } from '@mui/material/styles';
import {
    BasePage,
    useResourceApiService,
    useBaseAppContext,
    dateFormatLocale,
    MuiDataGridColDef,
} from 'reactlib';
import SalutToolbar from '../components/SalutToolbar';
import UpdownBarChart from '../components/UpdownBarChart';
import {
    DataGridPro,
    GridSlots,
    GridTreeDataGroupingCell,
    isAutogeneratedRow,
    useGridApiRef,
} from '@mui/x-data-grid-pro';
import { PieChart } from '@mui/x-charts';
import DataGridNoRowsOverlay from '../../lib/components/mui/datagrid/DataGridNoRowsOverlay';
import { Icon, IconButton } from '@mui/material';
import { useEffect, useState } from 'react';
import { GridGroupingColDefOverride } from '@mui/x-data-grid-pro/models/gridGroupingColDefOverride';

type OnRowExpansionChangeFunction = (id: string | number, expanded: boolean) => void;

interface DefaultRowExpansionState {
    [id: string | number]: boolean;
}

const useAppData = () => {
    const {
        isReady: appEntornApiIsReady,
        find: appEntornApiFind,
        artifactAction: appEntornApiAction,
    } = useResourceApiService('entornApp');
    const { isReady: appApiIsReady, find: appApiFind } = useResourceApiService('app');
    const { isReady: salutApiIsReady, artifactReport: salutApiReport } =
        useResourceApiService('salut');
    const [loading, setLoading] = React.useState<boolean>();
    const [appEntorns, setAppEntorns] = React.useState<any[]>();
    const [apps, setApps] = React.useState<any[]>();
    const [estats, setEstats] = React.useState<Record<string, any>>({});
    const [salutLastItems, setSalutLastItems] = React.useState<any[]>();
    const [reportParams, setReportParams] = React.useState<any>();
    const refresh = (
        dataInici: string,
        dataFi: string,
        agrupacio: string,
        actionExec?: boolean
    ) => {
        const reportParams = {
            dataInici,
            dataFi,
            agrupacio,
        };
        setReportParams(reportParams);
        if (appEntornApiIsReady && salutApiIsReady && appApiIsReady) {
            setLoading(true);
            new Promise((resolve, reject) => {
                if (actionExec) {
                    appEntornApiAction(null, { code: 'refresh' }).then(resolve).catch(reject);
                } else {
                    resolve(null);
                }
            })
                .then(() => {
                    return appApiFind({
                        unpaged: true,
                        filter: 'activa : true',
                    });
                })
                .then((response) => {
                    setApps(response.rows);
                    return appEntornApiFind({
                        unpaged: true,
                        filter: 'activa : true AND app.activa : true',
                    });
                })
                .then((response) => {
                    setAppEntorns(response.rows);
                    return salutApiReport(null, { code: 'salut_last' });
                })
                .then((apiResponse) => {
                    const salutLastItems = apiResponse as any[];
                    setSalutLastItems(salutLastItems);
                    const ps: Promise<any>[] = salutLastItems?.map((i) => {
                        const reportData = {
                            ...reportParams,
                            entornAppId: i.entornAppId,
                        };
                        return new Promise((resolve, reject) => {
                            salutApiReport(null, { code: 'estat', data: reportData })
                                .then((ii) => {
                                    setEstats((e) => ({ ...e, [i.entornAppId]: ii }));
                                    resolve(null);
                                })
                                .catch(reject);
                        });
                    });
                    return Promise.all(ps);
                })
                .finally(() => setLoading(false));
        }
    };
    return {
        ready: appEntornApiIsReady && salutApiIsReady && appApiIsReady,
        loading,
        refresh,
        apps,
        appEntorns,
        salutLastItems,
        estats,
        reportParams,
    };
};

const UpdownPieChart: React.FC<any> = (props: { salutLastItems: any[] }) => {
    const { salutLastItems } = props;
    const { t } = useTranslation();
    const theme = useTheme();

    const upValue = salutLastItems.filter((salutItem) => salutItem.appEstat === 'UP').length;
    const warnValue = salutLastItems.filter((salutItem) => salutItem.appEstat === 'WARN').length;
    const downValue = salutLastItems.filter((salutItem) => salutItem.appEstat === 'DOWN' || salutItem.appEstat === 'ERROR').length;
    const degradedValue = salutLastItems.filter((salutItem) => salutItem.appEstat === 'DEGRADED').length;
    const maintenanceValue = salutLastItems.filter((salutItem) => salutItem.appEstat === 'MAINTENANCE').length;
    const unknownValue = salutLastItems.filter((salutItem) => salutItem.appEstat === 'UNKNOWN').length;

    return (
        <PieChart
            series={[
                {
                    // innerRadius: 30,
                    // outerRadius: 100,
                    // paddingAngle: 1,
                    highlightScope: { fade: 'global', highlight: 'item' },
                    highlighted: {
                        additionalRadius: 1,
                    },
                    cornerRadius: 5,
                    data: [
                        {
                            id: 'UP',
                            label: `${t('enum.appEstat.UP')} (${upValue})`,
                            value: upValue,
                            color: theme.palette.success.main,
                        },
                        {
                            id: 'WARN',
                            label: `${t('enum.appEstat.WARN')} (${warnValue})`,
                            value: warnValue,
                            color: theme.palette.warning.light,
                        },
                        {
                            id: 'DOWN',
                            label: `${t('enum.appEstat.DOWN')} (${downValue})`,
                            value: downValue,
                            color: theme.palette.error.main,
                        },
                        {
                            id: 'DEGRADED',
                            label: `${t('enum.appEstat.DEGRADED')} (${degradedValue})`,
                            value: degradedValue,
                            color: theme.palette.warning.dark,
                        },
                        {
                            id: 'MAINTENANCE',
                            label: `${t('enum.appEstat.MAINTENANCE')} (${maintenanceValue})`,
                            value: maintenanceValue,
                            color: theme.palette.primary.main,
                        },
                        {
                            id: 'UNKNOWN',
                            label: `${t('enum.appEstat.UNKNOWN')} (${unknownValue})`,
                            value: unknownValue,
                            color: theme.palette.grey[600],
                        },
                    ],
                },
            ]}
        />
    );
};

const ItemStateChip: React.FC<any> = (props: { up: boolean; date: string }) => {
    const { up, date } = props;
    const { t } = useTranslation()
    return (
        <>
            {up ? (
                <Chip label={t('enum.appEstat.UP')} size="small" color="success" />
            ) : (
                <Chip label={t('enum.appEstat.DOWN')} size="small" color="error" />
            )}
            <br />
            <Typography variant="caption">{date}</Typography>
        </>
    );
};

const AppDataTable: React.FC<any> = (props: {
    apps: any[];
    appEntorns: any[];
    salutLastItems: any[];
    onRowExpansionChange: OnRowExpansionChangeFunction;
    defaultRowExpansion: DefaultRowExpansionState;
}) => {
    const { appEntorns, salutLastItems, onRowExpansionChange, defaultRowExpansion, apps } = props;
    const { t } = useTranslation();
    const { getLinkComponent } = useBaseAppContext();
    const gridApiRef = useGridApiRef();
    const [expand, setExpand] = useState<boolean>(true);

    React.useEffect(() => {
        if (gridApiRef.current) {
            gridApiRef.current.subscribeEvent?.('rowExpansionChange', (node) => {
                onRowExpansionChange(node.id, !!node.childrenExpanded);
            });
        }
    }, [gridApiRef, onRowExpansionChange]);
    const findUpdownItem = React.useCallback(
        (id: any) => {
            return salutLastItems?.find((entry) => entry.entornAppId === id);
        },
        [salutLastItems]
    );

    const renderItemStateChip = React.useCallback(
        (id: any, upField: string) => {
            const updownItem = findUpdownItem(id);
            if (updownItem == null) {
                return undefined;
            }
            return (
                <ItemStateChip
                    up={updownItem[upField]}
                    date={dateFormatLocale(updownItem.data, true)}
                />
            );
        },
        [findUpdownItem]
    );

    const columns: MuiDataGridColDef[] = React.useMemo(() => {
        return [
            {
                flex: 0.3,
                field: 'estat',
                headerName: t('page.salut.apps.column.estat'),
                minWidth: 100,
                renderCell: ({ id }) => renderItemStateChip(id, 'appUp'),
            },
            {
                flex: 0.3,
                field: 'versio',
                headerName: t('page.salut.apps.column.versio'),
                minWidth: 100,
            },
            {
                flex: 0.3,
                field: 'revisioSimplificat',
                headerName: t('page.salut.apps.column.revisio'),
                minWidth: 100,
            },
            {
                flex: 0.3,
                field: 'bd',
                headerName: t('page.salut.apps.column.bd'),
                minWidth: 100,
                maxWidth: 130,
                renderCell: ({ id }) => renderItemStateChip(id, 'bdUp'),
            },
            {
                flex: 0.3,
                field: 'latencia',
                headerName: t('page.salut.apps.column.latencia'),
                minWidth: 100,
                valueGetter: (_value, row) => {
                    const updownItem = findUpdownItem(row.id);
                    return updownItem?.appLatencia != null
                        ? updownItem.appLatencia + ' ms'
                        : t('page.salut.nd');
                },
            },
            {
                flex: 0.5,
                field: 'integ',
                headerName: t('page.salut.apps.column.integ'),
                minWidth: 100,
                renderCell: ({ id }) => {
                    const updownItem = findUpdownItem(id);

                    if (!updownItem) {
                        return null;
                    }

                    return (
                        <>
                            <Chip
                                label={updownItem.integracioUpCount}
                                size="small"
                                color="success"
                            />
                            &nbsp;/&nbsp;
                            <Chip
                                label={updownItem.integracioDownCount}
                                size="small"
                                color="error"
                            />
                        </>
                    );
                },
            },
            {
                flex: 0.5,
                field: 'subsis',
                headerName: t('page.salut.apps.column.subsis'),
                minWidth: 100,
                renderCell: ({ id }) => {
                    const updownItem = findUpdownItem(id);

                    if (!updownItem) {
                        return null;
                    }
                    return (
                        <>
                            <Chip
                                label={updownItem.subsistemaUpCount}
                                size="small"
                                color="success"
                            />
                            &nbsp;/&nbsp;
                            <Chip
                                label={updownItem.subsistemaDownCount}
                                size="small"
                                color="error"
                            />
                        </>
                    );
                },
            },
            {
                flex: 0.5,
                field: 'msgs',
                headerName: t('page.salut.apps.column.msgs'),
                minWidth: 150,
                renderCell: ({ id }) => {
                    const updownItem = findUpdownItem(id);

                    if (!updownItem) {
                        return null;
                    }
                    return (
                        <>
                            <Chip
                                label={updownItem.missatgeErrorCount}
                                size="small"
                                color="error"
                            />
                            &nbsp;/&nbsp;
                            <Chip
                                label={updownItem.missatgeWarnCount}
                                size="small"
                                color="warning"
                            />
                            &nbsp;/&nbsp;
                            <Chip label={updownItem.missatgeInfoCount} size="small" color="info" />
                        </>
                    );
                },
            },
            {
                field: 'detalls',
                headerName: '',
                minWidth: 100,
                renderCell: ({ id }) => (
                    <Button
                        variant="contained"
                        size="small"
                        component={getLinkComponent()}
                        to={'appinfo/' + id}
                    >
                        {t('page.salut.apps.detalls')}
                    </Button>
                ),
            },
        ];
    }, [findUpdownItem, getLinkComponent, renderItemStateChip, t]);

    const groupingColDef: GridGroupingColDefOverride = React.useMemo(
        () => ({
            flex: 1,
            minWidth: 300,
            renderHeader: (params) => {
                return (
                    <Grid
                        container
                        display={'flex'}
                        flexDirection={'row'}
                        alignItems={'center'}
                        justifyContent={'space-between'}
                        width={'100%'}
                    >
                        <Grid size={6}>{params?.colDef?.headerName}</Grid>

                        <Grid size={6}>
                            <IconButton
                                onClick={() => {
                                    setExpand(true);
                                    if (defaultRowExpansion != null) {
                                        Object.keys(defaultRowExpansion).map((id) => {
                                            onRowExpansionChange(id, true);
                                        });
                                    }
                                }}
                            >
                                <Icon>unfold_more</Icon>
                            </IconButton>

                            <IconButton
                                onClick={() => {
                                    setExpand(false);
                                    if (defaultRowExpansion != null) {
                                        Object.keys(defaultRowExpansion).map((id) => {
                                            onRowExpansionChange(id, false);
                                        });
                                    }
                                }}
                            >
                                <Icon>unfold_less</Icon>
                            </IconButton>
                        </Grid>
                    </Grid>
                );
            },
            renderCell: (params) => {
                // TODO Mirar de referenciar la App usando una columna única en lugar del nombre
                const app = apps.find((app) => app.nom === params.formattedValue);
                if (!app) { // TODO Usar una mejor condicion para diferenciar entre rows autogeneradas o no
                    return <GridTreeDataGroupingCell {...params} />;
                }
                return (
                        <GridTreeDataGroupingCell
                            {...params}
                            formattedValue={
                                <Box
                                    sx={{
                                        display: 'flex',
                                        alignItems: 'center',
                                        gap: '8px',
                                    }}
                                >
                                    {app.logo && (
                                        <img
                                            src={'data:image/png;base64,' + app.logo}
                                            alt="Logo de l'aplicació"
                                            style={{
                                                height: '48px',
                                            }}
                                        />
                                    )}
                                    {params.formattedValue}
                                </Box>
                            }
                        />
                );
            },
            colSpan: (_value, row) => {
                if (isAutogeneratedRow(row)) return columns.length + 1;
            },
        }),
        [columns.length, defaultRowExpansion, onRowExpansionChange, apps]
    );

    return (
        <DataGridPro
            // showToolbar TODO Considerar añadirlo como funcionalidad extra
            apiRef={gridApiRef}
            columns={columns}
            rows={appEntorns}
            treeData
            getTreeDataPath={(row) => [row.app.description, row.entorn.description]}
            groupingColDef={groupingColDef}
            isGroupExpandedByDefault={(node) => {
                if (defaultRowExpansion[node.id] != null) return defaultRowExpansion[node.id];
                return expand;
            }}
            hideFooter
            slots={{
                noRowsOverlay: DataGridNoRowsOverlay as GridSlots['noRowsOverlay'],
            }}
        />
    );
};

const Salut: React.FC = () => {
    const { t } = useTranslation();
    const {
        ready,
        loading,
        refresh: appDataRefresh,
        apps,
        appEntorns,
        salutLastItems,
        estats,
        reportParams,
    } = useAppData();
    const { setMarginsDisabled } = useBaseAppContext();
    const [expansionState, setExpansionState] = React.useState<DefaultRowExpansionState>({});
    React.useEffect(() => {
        setMarginsDisabled(true);
        return () => setMarginsDisabled(false);
    }, []);
    const dataLoaded = ready && loading != null && !loading;
    const toolbar = (
        <SalutToolbar title={t('page.salut.title')} ready={ready} onRefresh={appDataRefresh} />
    );
    const onRowExpansionChange: OnRowExpansionChangeFunction = (id, expanded) => {
        setExpansionState((prevState) => ({
            ...prevState,
            [id]: expanded,
        }));
    };
    return (
        <BasePage toolbar={toolbar}>
            {loading ? (
                <Box
                    sx={{
                        display: 'flex',
                        flexDirection: 'column',
                        justifyContent: 'center',
                        alignItems: 'center',
                        minHeight: 'calc(100vh - 80px)',
                    }}
                >
                    <CircularProgress size={100} />
                </Box>
            ) : (
                <Grid container spacing={2}>
                    <Grid size={3} sx={{ height: '200px' }}>
                        <Box
                            sx={{
                                height: '100%',
                                display: 'flex',
                                alignItems: 'center',
                                justifyContent: 'center',
                            }}
                        >
                            {dataLoaded && <UpdownPieChart salutLastItems={salutLastItems} />}
                        </Box>
                    </Grid>
                    <Grid size={9} sx={{ height: '200px' }}>
                        {dataLoaded && (
                            <UpdownBarChart
                                dataInici={reportParams?.dataInici}
                                agrupacio={reportParams?.agrupacio}
                                estats={estats}
                            />
                        )}
                    </Grid>
                    <Grid size={12}>
                        {dataLoaded && (
                            <AppDataTable
                                apps={apps}
                                appEntorns={appEntorns}
                                salutLastItems={salutLastItems}
                                onRowExpansionChange={onRowExpansionChange}
                                defaultRowExpansion={expansionState}
                            />
                        )}
                    </Grid>
                </Grid>
            )}
        </BasePage>
    );
};

export default Salut;
